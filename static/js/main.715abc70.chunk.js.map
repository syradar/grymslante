{"version":3,"sources":["styles.ts","components/navbar.tsx","components/footer.tsx","components/stepper.tsx","components/heading.tsx","pages/skills.tsx","components/segmented-control.tsx","utils/dice-roller.ts","pages/dice.tsx","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["card","buttonPrimary","Navbar","css","to","Footer","href","Date","getFullYear","Stepper","props","twProps","label","htmlFor","id","type","onClick","value","min","onChange","aria-controls","margin","step","max","e","parseInt","handleChange","target","h2Style","h3Style","Heading","h3","children","lowest","atLeastOne","getSkillCost","initial","modifier","cost","Skills","useState","current","setCurrent","setTarget","setModifier","newCurrent","newTarget","SegmentedControl","segments","onSegmentClick","selectedIndex","gridTemplateColumns","length","map","s","index","outline","boxShadow","content","display","position","right","width","height","top","opacity","transition","transform","style","rollDice","Math","floor","random","d5","d10","d20","exploding","ed","sum","result","newSum","explodingD10","Dice","active","setActive","explodeOn","setExplodeOn","diceResult","setDiceResult","undefined","handleSegmentClick","handleModifierChange","handleExplodeOn","dieFn","die","getDieType","Home","App","darkMode","setDarkMode","basename","className","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.715abc70.chunk.js","sourcesContent":["import tw from \"twin.macro\";\n\nexport const card = () => [\n    tw`rounded-lg p-3 shadow light:bg-white dark:bg-gray-700`\n]\n\nexport const buttonPrimary = () => [\n    tw`rounded-lg py-2 px-3 \n    text-red-100 bg-red-600 hover:bg-red-500\n    dark:text-red-900 dark:bg-red-400 dark:hover:bg-red-300 \n\n    `\n]\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { card } from '../styles';\n\nconst Navbar = () => (\n  <nav tw=\"mb-5\" css={card}>\n    <ul tw=\"grid grid-flow-col gap-x-3\">\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/skills\">Skills</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/dice\">Dice</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/names\">Names</Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React from 'react';\n\nconst Footer = () => (\n  <footer tw=\"py-4 px-3 bg-gray-100 dark:bg-gray-800 grid grid-flow-col flex-shrink-0 text-sm dark:text-gray-400\">\n    <a tw=\"text-red-500 hover:text-red-400 hover:underline\" href=\"grymslante\">\n      GitHub\n    </a>\n    <div tw=\"text-right\">\n      Created with ❤️ by David Malmström &copy; {new Date().getFullYear()}\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css, TwStyle } from 'twin.macro';\n\nexport interface StepperProps {\n  id: string;\n  twProps?: TwStyle;\n  label?: string;\n  max: number;\n  min: number;\n  onChange: (value: number) => void;\n  value: number;\n}\n\nexport function Stepper(props: StepperProps) {\n  const decrement = () => {\n    if (props.value > props.min) {\n      props.onChange(props.value - 1);\n    }\n  };\n\n  const increment = () => {\n    if (props.value < props.max) {\n      props.onChange(props.value + 1);\n    }\n  };\n\n  const handleChange = (e: any) => {\n    props.onChange(parseInt(e, 10) || 0);\n  };\n\n  return (\n    <div css={props.twProps}>\n      {props.label && (\n        <label tw=\"block mb-1\" htmlFor={props.id}>\n          {props.label}\n        </label>\n      )}\n      <div tw=\"w-auto inline-flex\">\n        <button\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 py-2 px-3 rounded-bl-md rounded-tl-md rounded-tr-none rounded-br-none transition-colors\"\n          type=\"button\"\n          onClick={decrement}\n          aria-controls={props.id}\n        >\n          –\n        </button>\n        <input\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 focus:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 focus:dark:bg-gray-400 text-center appearance-none rounded-none transition-colors\"\n          css={{\n            '::-webkit-inner-spin-button': {\n              ' -webkit-appearance': 'none',\n              margin: '0',\n            },\n            '::-webkit-outer-spin-button': {\n              ' -webkit-appearance': 'none',\n              margin: '0',\n            },\n          }}\n          type=\"number\"\n          step=\"1\"\n          id={props.id}\n          value={props.value}\n          min={props.min}\n          max={props.max}\n          onChange={(e) => handleChange(e.target.value)}\n        />\n        <button\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 py-2 px-3 rounded-br-md rounded-tr-md rounded-tl-none rounded-bl-none transition-colors\"\n          type=\"button\"\n          onClick={increment}\n          aria-controls={props.id}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css, TwStyle } from 'twin.macro';\n\nexport interface HeadingProps {\n  h3?: boolean;\n}\n\nconst h2Style = () => [tw`mb-3 text-xl font-bold`];\n\nconst h3Style = () => [tw`mb-2 text-lg font-bold`];\n\nexport function Heading({\n  h3 = false,\n  children,\n}: React.PropsWithChildren<HeadingProps>) {\n  return h3 ? (\n    <h3 css={h3Style}>{children}</h3>\n  ) : (\n    <h2 css={h2Style}>{children}</h2>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nimport { useState } from 'react';\nimport { Stepper } from '../components/stepper';\nimport { Heading } from '../components/heading';\n\nconst atLeast = (lowest: number) => (value: number) =>\n  value < lowest ? lowest : value;\n\nconst atLeastOne = atLeast(1);\n\nconst getSkillCost = (\n  initial: number,\n  target: number,\n  modifier: number = 0,\n  cost: number = 0\n): number =>\n  initial >= target\n    ? cost\n    : getSkillCost(\n        initial + 1,\n        target,\n        modifier,\n        cost + atLeastOne(initial + 1 + modifier)\n      );\n\nexport const Skills = () => {\n  const [current, setCurrent] = useState<number>(1);\n  const [target, setTarget] = useState<number>(2);\n  const [modifier, setModifier] = useState<number>(0);\n\n  const handleCurrentChange = (newCurrent: number) => {\n    setCurrent(newCurrent);\n    if (newCurrent >= target) {\n      setTarget(newCurrent + 1);\n    }\n  };\n\n  const handleTargetChange = (newTarget: number) => {\n    setTarget(newTarget);\n    if (newTarget <= current) {\n      setCurrent(newTarget - 1);\n    }\n  };\n\n  return (\n    <>\n      <Heading>Skill Calculator</Heading>\n      <div css={card}>\n        <div tw=\"grid grid-flow-col\">\n          <Stepper\n            twProps={tw`mb-4`}\n            id={'current'}\n            label={'Old Skill Value'}\n            min={1}\n            max={20}\n            value={current}\n            onChange={(value) => handleCurrentChange(value)}\n          ></Stepper>\n\n          <Stepper\n            twProps={tw`mb-4`}\n            id={'modifier'}\n            label={'Attribute Modifier'}\n            min={-4}\n            max={4}\n            value={modifier}\n            onChange={(value) => setModifier(value)}\n          ></Stepper>\n        </div>\n\n        <Stepper\n          twProps={tw`mb-4`}\n          id={'target'}\n          label={'New Skill Value'}\n          min={2}\n          max={20}\n          value={target}\n          onChange={(value) => handleTargetChange(value)}\n        ></Stepper>\n\n        <div tw=\"text-center\">Cost</div>\n        <div tw=\"text-9xl text-center\">\n          {getSkillCost(current, target, modifier)}\n        </div>\n      </div>\n    </>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\n\nexport interface SegmentedControlProps {\n  segments: string[];\n  onSegmentClick: (index: number) => void;\n  selectedIndex: number;\n}\n\nexport function SegmentedControl({\n  segments,\n  onSegmentClick,\n  selectedIndex,\n}: SegmentedControlProps) {\n  return (\n    <div tw=\"p-1 bg-gray-300 dark:bg-gray-600 rounded-xl shadow-inner \">\n      <div\n        tw=\"relative grid gap-x-2\"\n        css={{\n          gridTemplateColumns: `repeat(${segments.length}, minmax(0, 1fr))`,\n        }}\n      >\n        {segments.map((s, index) => (\n          <button\n            key={index}\n            tw=\"px-2 py-2 z-10 rounded-xl relative after:bg-gray-400 dark:after:bg-gray-500\"\n            css={{\n              outline: 'none !important',\n              ':focus': {\n                boxShadow: '0 0 4px 0 rgba(96, 165, 250, 1.1)',\n              },\n              ':after': {\n                content: '\"\"',\n                display: 'block',\n                position: 'absolute',\n                right: '-0.25rem',\n                width: '0.01rem',\n                height: '1.5rem',\n                top: '50%',\n                opacity: `${\n                  index === selectedIndex || index === selectedIndex - 1 ? 0 : 1\n                }`,\n                transition: 'opacity 150ms ease-in-out',\n                transform: 'translateY(-50%)',\n              },\n            }}\n            onClick={() => onSegmentClick(index)}\n          >\n            {s}\n          </button>\n        ))}\n        <div\n          tw=\"h-full z-0 absolute transition-transform shadow-md rounded-xl bg-white dark:bg-gray-500\"\n          style={{\n            width: `calc( (100% - ((${segments.length - 1} ) * 0.5rem)) / ${\n              segments.length\n            })`,\n            transform: `translateX(calc(${selectedIndex * 100}% + ${\n              selectedIndex * 0.5\n            }rem))`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","const rollDice = (min: number, max: number) => () =>\n  min + Math.floor(Math.random() * (max - min + 1));\n\nexport const d2 = rollDice(1, 2);\nexport const d3 = rollDice(1, 3);\nexport const d5 = rollDice(1, 5);\nexport const d10 = rollDice(1, 10);\nexport const d20 = rollDice(1, 20);\n\nexport type ExplodingRange = 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;\nexport const validExplodeRange = (value: number): value is ExplodingRange => value <= 10 && value >= 2;\n\nconst exploding = (ed: ExplodingRange = 10, sum: number = 0): number => {\n  const result = d10();\n  const newSum = sum + result;\n\n  if (result < ed) return newSum;\n\n  return exploding(ed, newSum);\n};\n\nexport const explodingD10 = (ed: ExplodingRange = 10) =>\n  exploding(ed);","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { useState } from 'react';\n\nimport { SegmentedControl } from '../components/segmented-control';\nimport { Stepper } from '../components/stepper';\nimport { buttonPrimary, card } from '../styles';\nimport {\n  d10,\n  d20,\n  d5,\n  explodingD10,\n  validExplodeRange,\n} from '../utils/dice-roller';\nimport { Heading } from '../components/heading';\n\nexport const Dice = () => {\n  const segments = ['d5', 'd10', 'd10 OR', 'd20'];\n  const [active, setActive] = useState(0);\n\n  const handleSegmentClick = (index: number) => {\n    setActive(index);\n    setDiceResult(undefined);\n  };\n\n  const [modifier, setModifier] = useState(0);\n  const handleModifierChange = (value: number) => {\n    setModifier(value);\n    setDiceResult(undefined);\n  };\n\n  const [explodeOn, setExplodeOn] = useState(10);\n  const handleExplodeOn = (value: number) => {\n    setExplodeOn(value);\n    setDiceResult(undefined);\n  };\n\n  const [diceResult, setDiceResult] = useState<number>();\n\n  const getDieType = (die: string) => {\n    switch (die) {\n      case 'd5':\n        return d5;\n      case 'd10':\n        return d10;\n      case 'd10 OR':\n        return explodingD10;\n      case 'd20':\n      default:\n        return d20;\n    }\n  };\n\n  const rollDie = () => {\n    const dieFn = getDieType(segments[active]);\n    const result =\n      segments[active] === 'd10 OR' && validExplodeRange(explodeOn)\n        ? dieFn(explodeOn) + modifier\n        : dieFn() + modifier;\n    setDiceResult(() => result);\n  };\n\n  return (\n    <>\n      <Heading>Dice Roller</Heading>\n      <div tw=\"flex flex-col justify-center\" css={card}>\n        <div tw=\"mb-3\">\n          <SegmentedControl\n            segments={segments}\n            // segments={['d5', 'd10']}\n            selectedIndex={active}\n            onSegmentClick={(index) => handleSegmentClick(index)}\n          ></SegmentedControl>\n        </div>\n        <div tw=\"grid grid-flow-col mb-5\">\n          <Stepper\n            id={'diceModifier'}\n            label={'Modifier'}\n            min={-10}\n            max={10}\n            value={modifier}\n            onChange={(value) => handleModifierChange(value)}\n          ></Stepper>\n          {segments[active] === 'd10 OR' && (\n            <Stepper\n              id={'explodingModifier'}\n              label={'Explode on'}\n              min={2}\n              max={10}\n              value={explodeOn}\n              onChange={(value) => handleExplodeOn(value)}\n            ></Stepper>\n          )}\n        </div>\n        <button tw=\"mb-5\" css={buttonPrimary} onClick={rollDie}>\n          Roll 1{segments[active]}\n          {segments[active] === 'd10 OR' && (\n            <span> ({explodeOn === 10 ? `10` : `${explodeOn}–10`})</span>\n          )}\n          {modifier !== 0 && (\n            <span>\n              {modifier > 0 ? ' +' : ' '}\n              {modifier}\n            </span>\n          )}\n        </button>\n        {diceResult && (\n          <>\n            <div tw=\"text-9xl text-center\">{diceResult}</div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nexport const Home = () => <div css={card}>Tools for Trudvang</div>;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Footer from './components/footer';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Skills } from './pages/skills';\nimport { Dice } from './pages/dice';\nimport { Home } from './pages/home';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(true);\n\n  return (\n    <Router basename=\"/grymslante\">\n      <div className={`app ${darkMode ? 'dark' : 'light'}`}>\n        <div tw=\"flex flex-col min-h-screen transition-colors light:bg-gray-50 dark:bg-gray-900 dark:text-gray-50\">\n          <div tw=\"py-4 px-3 flex-auto flex-shrink-0\">\n            <button\n              tw=\"py-2 px-3 border mb-3\"\n              onClick={() => setDarkMode(!darkMode)}\n            >\n              {darkMode ? 'Back to the Light' : 'Embrace the Darkness'}\n            </button>\n            <h1 tw=\"text-2xl mb-3 font-bold text-red-700 dark:text-red-400 \">\n              Grymslante\n            </h1>\n\n            <Navbar />\n\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/skills\">\n                <Skills />\n              </Route>\n              <Route path=\"/dice\">\n                <Dice />\n              </Route>\n            </Switch>\n          </div>\n          <Footer></Footer>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyles } from 'twin.macro';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}