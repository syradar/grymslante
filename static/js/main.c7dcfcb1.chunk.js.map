{"version":3,"sources":["components/skills.tsx","components/dice.tsx","styles.ts","components/navbar.tsx","components/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lowest","min","max","card","Navbar","css","to","atLeastOne","value","getSkillCost","initial","target","modifier","cost","Skills","useState","current","setCurrent","setTarget","setModifier","className","type","onClick","onChange","event","num","parseInt","console","log","d10","Math","floor","random","exploding","ed","sum","result","newSum","explodingD10","Dice","Home","App","darkMode","setDarkMode","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7dcfcb1.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nimport { useState } from 'react';\n\nconst atLeast = (lowest: number) => (value: number) =>\n  value < lowest ? lowest : value;\n\nconst atLeastOne = atLeast(1);\n\nconst getSkillCost = (\n  initial: number,\n  target: number,\n  modifier: number = 0,\n  cost: number = 0\n): number =>\n  initial >= target\n    ? cost\n    : getSkillCost(\n        initial + 1,\n        target,\n        modifier,\n        cost + atLeastOne(initial + 1 + modifier)\n      );\n\nexport const Skills = () => {\n  const [current, setCurrent] = useState<number>(1);\n  const [target, setTarget] = useState<number>(2);\n  const [modifier, setModifier] = useState<number>(0);\n\n  return (\n    <div css={card}>\n      <h2>Skill calculator</h2>\n      <p>Current</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => {\n            if (current > 1) {\n              setCurrent(current - 1);\n            } else {\n              setCurrent(1);\n            }\n          }}\n        >\n          –\n        </button>\n        <input\n          type=\"text\"\n          value={current}\n          onChange={(event) => {\n            const num = parseInt(event.target.value, 10) || 0;\n            console.log('num', num);\n            setCurrent(num);\n\n            if (num > 1) {\n              if (num >= target) setTarget(num + 1);\n            }\n          }}\n        />\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => {\n            setCurrent(current + 1);\n            if (current + 1 >= target) setTarget(target + 1);\n          }}\n        >\n          +\n        </button>\n      </div>\n      <p>Target</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => {\n            if (target > 2) {\n              setTarget(target - 1);\n              if (target - 1 <= current) setCurrent(current - 1);\n            }\n          }}\n        >\n          –\n        </button>\n        <span>{target}</span>\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => setTarget(target + 1)}\n        >\n          +\n        </button>\n      </div>\n      <p>Modifier</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => setModifier(modifier - 1)}\n        >\n          –\n        </button>\n        <span>{modifier}</span>\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => setModifier(modifier + 1)}\n        >\n          +\n        </button>\n      </div>\n      <p>Cost: {getSkillCost(current, target, modifier)}</p>\n    </div>\n  );\n};\n","const rollDice = (min: number, max: number) => () =>\n  min + Math.floor(Math.random() * (max - min + 1));\n\n//const d2 = rollDice(1, 2);\n//const d3 = rollDice(1, 3);\n//const d5 = rollDice(1, 5);\nconst d10 = rollDice(1, 10);\n//const d20 = rollDice(1, 20);\n\ntype ExplodingRange = 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;\n\nconst exploding = (ed: ExplodingRange = 10, sum: number = 0): number => {\n  const result = d10();\n  const newSum = sum + result;\n\n  if (result < ed) return newSum;\n\n  return exploding(ed, newSum);\n};\n\nconst explodingD10 = (ed: ExplodingRange = 10, modifier: number = 0) =>\n  exploding(ed) + modifier;\n\nexport const Dice = () => (\n  <>\n    <p>Check console</p>\n    {console.log(explodingD10(7, 3))}\n  </>\n);\n","import tw from \"twin.macro\";\n\nexport const card = () => [\n    tw`rounded-lg p-3 shadow light:bg-white dark:bg-gray-700`\n]\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { card } from '../styles';\n\nconst Navbar = () => (\n  <nav tw=\"mb-5\" css={card}>\n    <ul tw=\"grid grid-flow-col gap-x-3\">\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/skills\">Skills</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/dice\">Dice</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/names\">Names</Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nexport const Home = () => <div css={card}>Tools for Trudvang</div>;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Skills } from './components/skills';\nimport { Dice } from './components/dice';\nimport { Home } from './components/home';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(true);\n\n  return (\n    <Router>\n      <div className={`app ${darkMode ? 'dark' : 'light'}`}>\n        <div tw=\"min-h-screen py-4 px-3 transition-colors light:bg-gray-50 dark:bg-gray-900 dark:text-gray-50\">\n          <button\n            tw=\"py-2 px-3 border mb-3\"\n            onClick={() => setDarkMode(!darkMode)}\n          >\n            {darkMode ? 'Back to the Light' : 'Embrace the Darkness'}\n          </button>\n          <h1 tw=\"text-2xl mb-3 font-bold text-red-700 dark:text-red-400 \">\n            Grymslante\n          </h1>\n\n          <Navbar />\n\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/skills\">\n              <Skills />\n            </Route>\n            <Route path=\"/dice\">\n              <Dice />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyles } from 'twin.macro';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}