{"version":3,"sources":["pages/skills.tsx","styles.ts","components/navbar.tsx","components/segmented-control.tsx","components/stepper.tsx","utils/dice-roller.ts","pages/dice.tsx","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lowest","card","buttonPrimary","Navbar","css","to","atLeastOne","value","getSkillCost","initial","target","modifier","cost","Skills","useState","current","setCurrent","setTarget","setModifier","className","type","onClick","onChange","event","num","parseInt","console","log","SegmentedControl","segments","onSegmentClick","selectedIndex","gridTemplateColumns","length","map","s","index","outline","boxShadow","content","display","position","right","width","height","top","opacity","transition","transform","style","Stepper","props","label","htmlFor","id","min","aria-controls","margin","step","max","e","handleChange","rollDice","Math","floor","random","d5","d10","d20","Dice","active","setActive","diceResult","setDiceResult","undefined","handleSegmentClick","handleModifierChange","result","die","getDieType","dieFn","Home","App","darkMode","setDarkMode","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ad18fd1.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nimport { useState } from 'react';\n\nconst atLeast = (lowest: number) => (value: number) =>\n  value < lowest ? lowest : value;\n\nconst atLeastOne = atLeast(1);\n\nconst getSkillCost = (\n  initial: number,\n  target: number,\n  modifier: number = 0,\n  cost: number = 0\n): number =>\n  initial >= target\n    ? cost\n    : getSkillCost(\n        initial + 1,\n        target,\n        modifier,\n        cost + atLeastOne(initial + 1 + modifier)\n      );\n\nexport const Skills = () => {\n  const [current, setCurrent] = useState<number>(1);\n  const [target, setTarget] = useState<number>(2);\n  const [modifier, setModifier] = useState<number>(0);\n\n  return (\n    <div css={card}>\n      <h2>Skill calculator</h2>\n      <p>Current</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => {\n            if (current > 1) {\n              setCurrent(current - 1);\n            } else {\n              setCurrent(1);\n            }\n          }}\n        >\n          –\n        </button>\n        <input\n          type=\"text\"\n          value={current}\n          onChange={(event) => {\n            const num = parseInt(event.target.value, 10) || 0;\n            console.log('num', num);\n            setCurrent(num);\n\n            if (num > 1) {\n              if (num >= target) setTarget(num + 1);\n            }\n          }}\n        />\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => {\n            setCurrent(current + 1);\n            if (current + 1 >= target) setTarget(target + 1);\n          }}\n        >\n          +\n        </button>\n      </div>\n      <p>Target</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => {\n            if (target > 2) {\n              setTarget(target - 1);\n              if (target - 1 <= current) setCurrent(current - 1);\n            }\n          }}\n        >\n          –\n        </button>\n        <span>{target}</span>\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => setTarget(target + 1)}\n        >\n          +\n        </button>\n      </div>\n      <p>Modifier</p>\n      <div className=\"stepper\">\n        <button\n          className=\"dec\"\n          type=\"button\"\n          onClick={() => setModifier(modifier - 1)}\n        >\n          –\n        </button>\n        <span>{modifier}</span>\n        <button\n          className=\"inc\"\n          type=\"button\"\n          onClick={() => setModifier(modifier + 1)}\n        >\n          +\n        </button>\n      </div>\n      <p>Cost: {getSkillCost(current, target, modifier)}</p>\n    </div>\n  );\n};\n","import tw from \"twin.macro\";\n\nexport const card = () => [\n    tw`rounded-lg p-3 shadow light:bg-white dark:bg-gray-700`\n]\n\nexport const buttonPrimary = () => [\n    tw`rounded-lg py-2 px-3 \n    text-red-100 bg-red-600 hover:bg-red-500\n    dark:text-red-900 dark:bg-red-400 dark:hover:bg-red-300 \n\n    `\n]\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { card } from '../styles';\n\nconst Navbar = () => (\n  <nav tw=\"mb-5\" css={card}>\n    <ul tw=\"grid grid-flow-col gap-x-3\">\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/skills\">Skills</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/dice\">Dice</Link>\n      </li>\n      <li tw=\"hover:text-blue-400\">\n        <Link to=\"/names\">Names</Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\n\nexport interface SegmentedControlProps {\n  segments: string[];\n  onSegmentClick: (index: number) => void;\n  selectedIndex: number;\n}\n\nexport function SegmentedControl({\n  segments,\n  onSegmentClick,\n  selectedIndex,\n}: SegmentedControlProps) {\n  return (\n    <div tw=\"p-1 bg-gray-300 dark:bg-gray-600 rounded-xl shadow-inner \">\n      <div\n        tw=\"relative grid gap-x-2\"\n        css={{\n          gridTemplateColumns: `repeat(${segments.length}, minmax(0, 1fr))`,\n        }}\n      >\n        {segments.map((s, index) => (\n          <>\n            <button\n              key={index}\n              tw=\"px-3 py-2 z-10 rounded-xl relative after:bg-gray-400 dark:after:bg-gray-500\"\n              css={{\n                outline: 'none !important',\n                ':focus': {\n                  boxShadow: '0 0 4px 0 rgba(96, 165, 250, 1.1)',\n                },\n                ':after': {\n                  content: '\"\"',\n                  display: 'block',\n                  position: 'absolute',\n                  right: '-0.25rem',\n                  width: '0.01rem',\n                  height: '1.5rem',\n                  top: '50%',\n                  opacity: `${\n                    index === selectedIndex || index === selectedIndex - 1\n                      ? 0\n                      : 1\n                  }`,\n                  transition: 'opacity 150ms ease-in-out',\n                  transform: 'translateY(-50%)',\n                },\n              }}\n              onClick={() => onSegmentClick(index)}\n            >\n              {s}\n            </button>\n          </>\n        ))}\n        <div\n          tw=\"h-full z-0 absolute transition-transform shadow-md rounded-xl bg-white dark:bg-gray-500\"\n          style={{\n            width: `calc( (100% - ((${segments.length - 1} ) * 0.5rem)) / ${\n              segments.length\n            })`,\n            transform: `translateX(calc(${selectedIndex * 100}% + ${\n              selectedIndex * 0.5\n            }rem))`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\n\nexport interface StepperProps {\n  id: string;\n  label?: string;\n  max: number;\n  min: number;\n  onChange: (value: number) => void;\n  value: number;\n}\n\nexport function Stepper(props: StepperProps) {\n  const decrement = () => {\n    if (props.value > props.min) {\n      props.onChange(props.value - 1);\n    }\n  };\n\n  const increment = () => {\n    if (props.value < props.max) {\n      props.onChange(props.value + 1);\n    }\n  };\n\n  const handleChange = (e: any) => {\n    props.onChange(parseInt(e, 10) || 0);\n  };\n\n  return (\n    <div tw=\"\">\n      {props.label && (\n        <label tw=\"block mb-1\" htmlFor={props.id}>\n          {props.label}\n        </label>\n      )}\n      <div tw=\"w-auto inline-flex\">\n        <button\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 py-2 px-3 rounded-bl-md rounded-tl-md rounded-tr-none rounded-br-none transition-colors\"\n          type=\"button\"\n          onClick={decrement}\n          aria-controls={props.id}\n        >\n          –\n        </button>\n        <input\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 focus:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 focus:dark:bg-gray-400 text-center appearance-none rounded-none transition-colors\"\n          css={{\n            '::-webkit-inner-spin-button': {\n              ' -webkit-appearance': 'none',\n              margin: '0',\n            },\n            '::-webkit-outer-spin-button': {\n              ' -webkit-appearance': 'none',\n              margin: '0',\n            },\n          }}\n          type=\"number\"\n          step=\"1\"\n          id={props.id}\n          value={props.value}\n          min={props.min}\n          max={props.max}\n          onChange={(e) => handleChange(e.target.value)}\n        />\n        <button\n          tw=\"font-bold bg-gray-300 hover:bg-gray-200 dark:bg-gray-500 hover:dark:bg-gray-400 py-2 px-3 rounded-br-md rounded-tr-md rounded-tl-none rounded-bl-none transition-colors\"\n          type=\"button\"\n          onClick={increment}\n          aria-controls={props.id}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\n","const rollDice = (min: number, max: number) => () =>\n  min + Math.floor(Math.random() * (max - min + 1));\n\nexport const d2 = rollDice(1, 2);\nexport const d3 = rollDice(1, 3);\nexport const d5 = rollDice(1, 5);\nexport const d10 = rollDice(1, 10);\nexport const d20 = rollDice(1, 20);\n\nexport type ExplodingRange = 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;\n\nconst exploding = (ed: ExplodingRange = 10, sum: number = 0): number => {\n  const result = d10();\n  const newSum = sum + result;\n\n  if (result < ed) return newSum;\n\n  return exploding(ed, newSum);\n};\n\nexport const explodingD10 = (ed: ExplodingRange = 10, modifier: number = 0) =>\n  exploding(ed) + modifier;","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { useState } from 'react';\n\nimport { SegmentedControl } from '../components/segmented-control';\nimport { Stepper } from '../components/stepper';\nimport { buttonPrimary, card } from '../styles';\nimport { d10, d20, d5 } from '../utils/dice-roller';\n\nexport const Dice = () => {\n  const segments = ['d5', 'd10', 'd20'];\n  const [active, setActive] = useState(0);\n\n  const handleSegmentClick = (index: number) => {\n    setActive(index);\n    setDiceResult(undefined);\n  };\n\n  const [modifier, setModifier] = useState(0);\n  const handleModifierChange = (value: number) => {\n    setModifier(value);\n    setDiceResult(undefined);\n  };\n\n  const [diceResult, setDiceResult] = useState<number>();\n\n  const getDieType = (die: string) => {\n    switch (die) {\n      case 'd5':\n        return d5;\n      case 'd10':\n        return d10;\n      case 'd20':\n      default:\n        return d20;\n    }\n  };\n\n  const rollDie = () => {\n    const dieFn = getDieType(segments[active]);\n    const result = dieFn() + modifier;\n    setDiceResult(() => result);\n  };\n\n  return (\n    <>\n      <div tw=\"flex flex-col justify-center\" css={card}>\n        <div tw=\"mb-3\">\n          <SegmentedControl\n            segments={segments}\n            // segments={['d5', 'd10']}\n            selectedIndex={active}\n            onSegmentClick={(index) => handleSegmentClick(index)}\n          ></SegmentedControl>\n        </div>\n        <div tw=\"flex flex-col justify-center mb-5\">\n          <Stepper\n            id={'diceModifier'}\n            label={'Modifier'}\n            min={-10}\n            max={10}\n            value={modifier}\n            onChange={(value) => handleModifierChange(value)}\n          ></Stepper>\n        </div>\n        <button tw=\"mb-5\" css={buttonPrimary} onClick={rollDie}>\n          Roll\n        </button>\n        {diceResult && (\n          <>\n            <div tw=\"text-9xl text-center\">{diceResult}</div>\n            <div tw=\"text-center\">\n              1{segments[active]}{' '}\n              {modifier !== 0 && (\n                <span>\n                  {modifier > 0 ? '+' : ''} {modifier}\n                </span>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw, { css } from 'twin.macro';\nimport { card } from '../styles';\n\nexport const Home = () => <div css={card}>Tools for Trudvang</div>;\n","/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Skills } from './pages/skills';\nimport { Dice } from './pages/dice';\nimport { Home } from './pages/home';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(true);\n\n  return (\n    <Router basename=\"/grymslante\">\n      <div className={`app ${darkMode ? 'dark' : 'light'}`}>\n        <div tw=\"min-h-screen py-4 px-3 transition-colors light:bg-gray-50 dark:bg-gray-900 dark:text-gray-50\">\n          <button\n            tw=\"py-2 px-3 border mb-3\"\n            onClick={() => setDarkMode(!darkMode)}\n          >\n            {darkMode ? 'Back to the Light' : 'Embrace the Darkness'}\n          </button>\n          <h1 tw=\"text-2xl mb-3 font-bold text-red-700 dark:text-red-400 \">\n            Grymslante\n          </h1>\n\n          <Navbar />\n\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/skills\">\n              <Skills />\n            </Route>\n            <Route path=\"/dice\">\n              <Dice />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyles } from 'twin.macro';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}